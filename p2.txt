/*Design a scheduling program to implem
ents a Queue with two levels:
Queue 1 : fcfs Scheduling
Queue 2 : Round Robin Scheduling*/
#include<stdio.h>
#include<string.h>
#include<conio.h>
int main()
{
	     float burst_time[30], waiting_time[30], turnaround_time[30];
        float average_waiting_time = 0.0, average_turnaround_time = 0.0;
        int count, j, total_process;
        printf("Enter The Number of Processes To Execute:\t");
        scanf("%d", &total_process);
        printf("\nEnter The Burst Time of Processes:\n\n");
        for(count = 0; count < total_process; count++)
        {
                printf("Process [%d]:", count + 1);
                scanf("%f", &burst_time[count]);
        }
        waiting_time[0] = 0;   
        for(count = 1; count < total_process; count++)
        {
                waiting_time[count] = 0;
                for(j = 0; j < count; j++)
                {
                        waiting_time[count] = waiting_time[count] + burst_time[j];
                }
        }
        printf("\nProcess\t\tBurst Time\tWaiting Time\tTurnaround Time\n");
        for(count = 0; count < total_process; count++)
        {
                turnaround_time[count] = burst_time[count] + waiting_time[count];
                average_waiting_time = average_waiting_time + waiting_time[count];
                average_turnaround_time = average_turnaround_time + turnaround_time[count];
                printf("\nProcess [%d]\t\t%.2f\t\t%.2f\t\t%.2f", count + 1, burst_time[count], waiting_time[count], turnaround_time[count]);
        }
        printf("\n");
        average_waiting_time = average_waiting_time / count;
        average_turnaround_time = average_turnaround_time / count;
        printf("\nAverage Waiting Time = %f", average_waiting_time);
        printf("\nAverage Turnaround Time = %f", average_turnaround_time);
        printf("\n");
        return 0;
	int ts,pid[10],need[10],wt[10],tat[10],i1,j1,n2,n1;
	int bt[10],flag[10],ttat=0,twt=0,n,i;
	float awt,atat;
 	printf("\nEnter the number of Processors \n");
	scanf("%d",&n);
	n1=n;
	printf("\n Enter the Timeslice \n");
 	scanf("%d",&ts);
 	for(i=1;i<=n;i++)
	{
   		printf("\n Enter the process ID %d",i);
		scanf("%d",&pid[i]);
   		printf("\n Enter the Burst Time for the process");
   		scanf("%d",&bt[i]);
   		need[i]=bt[i];
 	}
 	for(i=1;i<=n;i++)
	{
		flag[i]=1;
  		wt[i]=0;
 	}
 	while(n!=0)
	{
   		for(i=1;i<=n;i++)
   		{
     		if(need[i]>=ts)
     		{
       			for(j=1;j<=n;j++)
				{
	  				if((i!=j)&&(flag[i]==1)&&(need[j]!=0))
	  				wt[j]+=ts;
       			}
      			need[i]-=ts;
      			if(need[i]==0)
      			{
	 				flag[i]=0;
	 				n--;
       			}
     		}
     		else
    		{
       			for(j=1;j<=n;j++)
       			{
	  				if((i!=j)&&(flag[i]==1)&&(need[j]!=0))
	  				wt[j]+=need[i];
       			}
       			need[i]=0;
       			n--;
       			flag[i]=0;
  			}
 		}
	}
	for(i=1;i<=n1;i++)
	{
  		tat[i]=wt[i]+bt[i];
  		twt=twt+wt[i];
  		ttat=ttat+tat[i];
	}
	awt=(float)twt/n1;
	atat=(float)ttat/n1;
	printf("\n\n Process \t Process ID  \t BurstTime \t Waiting Time \t TurnaroundTime \n ");
	for(i=1;i<=n1;i++)
	{ 
 		printf("\n %5d \t %5d \t\t %5d \t\t %5d \t\t %5d \n", i,pid[i],bt[i],wt[i],tat[i]);
	}
	printf("\n The average Waiting Time is",awt);
	printf("\n The average Turn around Time is",atat);
}
